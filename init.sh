#!/bin/bash

echo "Starting front init"

# Создание и заполнение package.json
echo "Create package.json"
> package.json  # Очистка файла перед записью
tee package.json <<EOF
{
  "devDependencies": {
    "@eslint/js": "^9.21.0",
    "css-loader": "^7.1.2",
    "eslint": "^9.21.0",
    "html-loader": "^5.1.0",
    "html-webpack-plugin": "^5.6.3",
    "jest": "^29.7.0",
    "prettier": "^3.5.1",
    "style-loader": "^4.0.0",
    "webpack": "^5.98.0",
    "webpack-cli": "^6.0.1",
    "webpack-dev-server": "^5.2.0"
  },
    "scripts": {
      "test": "jest"
    }
}
EOF
 
echo "Create package.json"
touch webpack.config.js
tee -a webpack.config.js <<EOF
const { watchFiles } = require("fs")
const HtmlWebpackPlugin = require("html-webpack-plugin")
const path = require ("path")


module.exports = {
    mode: "development",
    entry: "./src/index.js",
    output: {
        filename: "main.js",
        path: path.resolve(__dirname, "dist"),
        clean: true,
    },

    plugins:[
        new HtmlWebpackPlugin({
            template: "./src/index.html",
        })
    ],

    module: {
        rules: [
            {
                test: /\.css$/i,
                use: ["style-loader","css-loader"],
            },

            {
                test: /\.(png|svg|jpg|jpeg|gif)$/i,
                type: "asset/resource",
            },

            {
                test: /\.html$/i,
                loader: "html-loader",
            },
        ]   
    },

    devtool: "eval-source-map",
    devServer: {
        watchFiles: ["./src/index.html"],
    }
}
EOF
echo "Create webpack.config.js"
mkdir src dist
echo "Create src and dist dir"
touch ./src/index.css
tee -a ./src/index.css <<EOF
/* 1. Use a more-intuitive box-sizing model */
*, *::before, *::after {
    box-sizing: border-box;
  }
  /* 2. Remove default margin */
  * {
    margin: 0;
  }
  body {
    /* 3. Add accessible line-height */
    line-height: 1.5;
    /* 4. Improve text rendering */
    -webkit-font-smoothing: antialiased;
  }
  /* 5. Improve media defaults */
  img, picture, video, canvas, svg {
    display: block;
    max-width: 100%;
  }
  /* 6. Inherit fonts for form controls */
  input, button, textarea, select {
    font: inherit;
  }
  /* 7. Avoid text overflows */
  p, h1, h2, h3, h4, h5, h6 {
    overflow-wrap: break-word;
  }
  /* 8. Improve line wrapping */
  p {
    text-wrap: pretty;
  }
  h1, h2, h3, h4, h5, h6 {
    text-wrap: balance;
  }
  /*
    9. Create a root stacking context
  */
  #root, #__next {
    isolation: isolate;
  }

  /*
  ####################################################
  ####################################################
  ####################################################
  */

h1 {
    text-align: center;
    padding: 0rem;
    margin: 0rem;
    background-color: brown;
    color: white;
    border-radius: 1rem;
    outline-offset: -0.2rem;
    outline: 0.2rem dashed darkred;
}
EOF
touch ./src/index.html
tee -a ./src/index.html <<EOF
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>Im working here</h1>
</body>
</html>
EOF
touch ./src/index.js
tee -a ./src/index.js <<EOF
import './index.css'

console.log("Im working here");
EOF
echo "Fill src dir with basic files"
touch .gitignore
tee -a .gitignore <<EOF
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*
EOF
echo "Create .gitignore"
touch .prettierrc.json
tee -a .prettierrc.json <<EOF
{
    "trailingComma": "es5",
    "tabWidth": 2,
    "semi": false,
    "singleQuote": true
  }
EOF
echo "Create .prettierrc.json"
npm i
echo "Install NPM-packages"
echo "Ending front init"